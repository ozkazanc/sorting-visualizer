{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimation","array","animations","auxArray","slice","mergeSortHelper","left","right","middle","Math","floor","k","i","j","push","doMerge","length","getQuickSortAnimation","quickSortHelper","pivot","pivotIdx","randomIntFromIntervals","temp","partition","getHeapSortAnimation","heapify","heapSortHelper","size","rootIdx","largest","SortingVisualizer","props","state","this","resetArray","shuffle","setState","firstIdx","NUMBER_OF_ARRAY_BARS","secondIdx","denom","arrayBars","document","getElementsByClassName","firstBarIdx","secondBarIdx","firstBarStyle","style","secondBarStyle","color","setTimeout","backgroundColor","newHeight","height","swapped","bubbleSortHelper","getBubbleSortAnimation","jMin","selectionSortHelper","getSelectionSortAnimation","key","insertionSortHelper","getInsertionSortAnimation","className","map","value","idx","onClick","mergeSort","quickSort","heapSort","bubbleSort","selectionSort","insertionSort","reverseArray","almostSortedArray","fewUniqueArray","React","Component","min","max","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.89ee0d1d.chunk.js","sourcesContent":["import {randomIntFromIntervals} from '../SortingVisualizer/SortingVisualizer.jsx'\r\n// Merge Sort ======================================================\r\nexport function getMergeSortAnimation(array) {\r\n    const animations = [];\r\n    const auxArray = array.slice();\r\n\r\n    mergeSortHelper(array, 0, array.length - 1, auxArray, animations);\r\n    \r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(array, left, right, auxArray, animations) {\r\n    if(left >= right) return;\r\n    \r\n    const middle = Math.floor((left + right) / 2);\r\n    mergeSortHelper(auxArray, left, middle, array, animations);\r\n    mergeSortHelper(auxArray, middle + 1, right, array, animations);\r\n    \r\n    doMerge(array, left, middle, right, auxArray, animations);   \r\n}\r\n\r\nfunction doMerge(array, left, middle, right, auxArray, animations){\r\n  let k = left;\r\n  let i = left;\r\n  let j = middle + 1;\r\n  while (i <= middle && j <= right) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxArray[i] <= auxArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxArray[i]]);\r\n      array[k++] = auxArray[i++];\r\n    } else {\r\n      animations.push([k, auxArray[j]]);\r\n      array[k++] = auxArray[j++];\r\n    }\r\n  }\r\n  while (i <= middle) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n\r\n    animations.push([k, auxArray[i]]);\r\n    array[k++] = auxArray[i++];\r\n  }\r\n  while (j <= right) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n \r\n    animations.push([k, auxArray[j]]);\r\n    array[k++] = auxArray[j++];\r\n  }\r\n}\r\n\r\n// Bubble Sort ========================================================\r\nexport function getBubbleSortAnimation(array){\r\n  const animations = [];\r\n  bubbleSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations) {\r\n\tfor(let i = 0; i < array.length; i++){\r\n    let swapped = false;\r\n\t\tfor(let j = 0; j < array.length - i - 1; j++){\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      \r\n      if (array[j] > array[j + 1]){\r\n        animations.push([j, array[j + 1]]);\r\n        animations.push([j + 1, array[j]]);\r\n\r\n        let temp = array[j + 1];\r\n\t\t\t\tarray[j + 1] = array[j];\r\n        array[j] = temp;\r\n        \r\n        swapped = true;\r\n      }\r\n\r\n      else {\r\n        animations.push([j, array[j]]);\r\n        animations.push([j + 1, array[j + 1]]);\r\n      }\r\n    }\r\n    if(!swapped) break;\r\n\t}\r\n}\r\n\r\n// Quick Sort =================================\r\nexport function getQuickSortAnimation(array){\r\n  const animations = [];\r\n  quickSortHelper(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(array, left, right, animations){\r\n  if(left < right) {\r\n    // Put the pivot in the right place and have everything smaller than it to its left.\r\n    let pivot = partition(array, left, right, animations);\r\n    \r\n    quickSortHelper(array, left, pivot - 1, animations);\r\n    quickSortHelper(array, pivot + 1, right, animations);\r\n  }\r\n} \r\n\r\nfunction partition(array, left, right, animations){\r\n  let pivotIdx = randomIntFromIntervals(left, right);\r\n  let pivot = array[pivotIdx];\r\n  \r\n  let i = left - 1;\r\n  \r\n  for(let j = left; j <= right; j++){\r\n    if(j == pivotIdx) continue;\r\n    animations.push([j, pivotIdx]);\r\n    animations.push([j, pivotIdx]);\r\n\r\n    if(array[j] < pivot){\r\n      i++;\r\n      if(i == pivotIdx){\r\n        pivotIdx = j;\r\n      }\r\n    \r\n      animations.push([i, array[j]]);\r\n      animations.push([j, array[i]]);\r\n\r\n      //swap(array[i], array[j]);\r\n      let temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n\r\n    else {\r\n      animations.push([i + 1, array[i + 1]]);\r\n      animations.push([j, array[j]]);\r\n    }\r\n  }\r\n\r\n  // Push filler values into animation to skip them while processing\r\n  animations.push([i + 1, pivotIdx]);\r\n  animations.push([i + 1, pivotIdx]);\r\n  animations.push([i + 1, array[pivotIdx]]);\r\n  animations.push([pivotIdx, array[i + 1]]);\r\n  \r\n  //swap(array[i + 1], array[pivotIdx]);\r\n  let temp = array[i + 1];\r\n  array[i + 1] = array[pivotIdx];\r\n  array[pivotIdx] = temp;\r\n  \r\n  return i + 1;\r\n}\r\n\r\n// This does not work since it's just swaps the values internally\r\nfunction swap(a, b) {\r\n  let temp = a;\r\n  a = b;\r\n  b = temp;\r\n}\r\n\r\nfunction arraysEqual(a, b) {\r\n  if (a === b) return true;\r\n  if (a == null || b == null) return false;\r\n  if (a.length !== b.length) return false;\r\n\r\n  // If you don't care about the order of the elements inside\r\n  // the array, you should sort both arrays here.\r\n  // Please note that calling sort on an array will modify that array.\r\n  // you might want to clone your array first.\r\n\r\n  for (let i = 0; i < a.length; ++i) {\r\n    if (a[i] !== b[i]) return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n// Heap Sort =================================\r\nexport function getHeapSortAnimation(array){\r\n  const animations = [];\r\n  heapSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction heapSortHelper(array, animations){\r\n  \r\n  // Build max heap\r\n  for(let i = Math.floor(array.length / 2) - 1; i >= 0; i--){\r\n    heapify(array, array.length, i, animations);\r\n  }\r\n\r\n  // One by one extract an element from heap\r\n  for (let i = array.length - 1; i >= 0; i--){\r\n\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([i, array[0]]);\r\n    animations.push([0, array[i]]);\r\n    \r\n    // Move current root to end;\r\n    let temp = array[i];\r\n    array[i] = array[0];\r\n    array[0] = temp;\r\n\r\n    // Create the max heap on the reduced array\r\n    heapify(array, i, 0, animations);\r\n  }\r\n}\r\n\r\n// To heapify a subtree rooted with node rootIdx which is \r\n// an index in array. size is size of heap \r\nfunction heapify(array, size, rootIdx, animations){\r\n  // Initialize largest as root\r\n  let largest = rootIdx;\r\n  let left = rootIdx * 2 + 1;\r\n  let right = rootIdx * 2 + 2;\r\n\r\n  if(left < size && array[left] > array[largest]){\r\n    animations.push([left, largest]);\r\n    animations.push([left, largest]);\r\n    \r\n    largest = left;\r\n  }\r\n  else {\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n  }\r\n\r\n  if(right < size && array[right] > array[largest]){\r\n    animations.push([right, largest]);\r\n    animations.push([right, largest]);\r\n    \r\n    largest = right;\r\n  }\r\n  else {\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n  }\r\n\r\n  if(largest != rootIdx) {\r\n    animations.push([rootIdx, array[largest]]);\r\n    animations.push([largest, array[rootIdx]]);\r\n    \r\n    // Swap root and largest\r\n    let temp = array[rootIdx];\r\n    array[rootIdx] = array[largest];\r\n    array[largest] = temp;\r\n\r\n    heapify(array, size, largest, animations);\r\n  }\r\n  else{\r\n    animations.push([rootIdx, array[rootIdx]]);\r\n    animations.push([largest, array[largest]]);\r\n  }\r\n}\r\n\r\n// Selection Sort ===============================\r\nexport function getSelectionSortAnimation(array){\r\n  const animations = [];\r\n  selectionSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction selectionSortHelper(array, animations){\r\n  for(let i = 0; i < array.length; i++){\r\n    let jMin = i;\r\n    \r\n    for(let j = i + 1; j < array.length; j++){\r\n      animations.push([j, jMin]);\r\n      animations.push([j, jMin]);\r\n      animations.push([-1, -1]);\r\n      animations.push([-1, -1]);\r\n\r\n      if(array[j] < array[jMin]){\r\n        jMin = j;\r\n      }\r\n    }\r\n\r\n    if(jMin != i) {\r\n      animations.push([-1, -1]);\r\n      animations.push([-1, -1]);\r\n      animations.push([jMin, array[i]]);\r\n      animations.push([i, array[jMin]]);\r\n\r\n      let temp = array[i];\r\n      array[i] = array[jMin];\r\n      array[jMin] = temp;\r\n    }\r\n  }\r\n}\r\n\r\n// Insertion Sort ==================================\r\nexport function getInsertionSortAnimation(array){\r\n  const animations = [];\r\n  insertionSortHelper(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction insertionSortHelper(array, animations){\r\n  for(let i = 1; i < array.length; i++){\r\n    let key = array[i];\r\n    let j = i - 1;\r\n\r\n    animations.push([j, i]);\r\n    animations.push([j, i]);\r\n  \r\n    while(j >= 0 && array[j] > key){\r\n      animations.push([j + 1, array[j]]);\r\n      \r\n      array[j + 1] = array[j];\r\n      j--;\r\n\r\n      animations.push([j, i]);\r\n      animations.push([j, i]);\r\n    }\r\n    animations.push([j + 1, key]);\r\n\r\n    array[j + 1] = key;\r\n  }\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport \r\n{   \r\n    getMergeSortAnimation,\r\n    getBubbleSortAnimation,\r\n    getQuickSortAnimation,\r\n    getHeapSortAnimation,\r\n    getSelectionSortAnimation,\r\n    getInsertionSortAnimation\r\n} from '../SortingAlgorithms/SortingAlgorithms.js';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS =//10; /* Testing */ \r\n                            //290; /* 14 inch 1080p screen */ \r\n                            450; /* 24 inch 1080p screen */\r\n\r\nconst NUMBER_OF_UNIQUE_BARS = 5;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = [];\r\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i++){\r\n            // Create the array with random numbers between the given interval\r\n            //array.push(randomIntFromIntervals(1,800));\r\n\r\n            // Create the array with perfectly ascending numbers, very satisfying while sorting\r\n            // Note: Need to shuffle the array afterwards.\r\n            array.push(i + 1);\r\n\r\n            // Reverse\r\n            //array.push(NUMBER_OF_ARRAY_BARS - i);\r\n        }\r\n        shuffle(array);\r\n\r\n        this.setState({array});\r\n    }\r\n\r\n    reverseArray() {\r\n        const array = [];\r\n        for (let i = NUMBER_OF_ARRAY_BARS; i > 0; i--) {\r\n            array.push(i);\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    almostSortedArray() {\r\n        const array = [];\r\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n            array.push(i + 1);\r\n        }\r\n        let firstIdx = randomIntFromIntervals(0, NUMBER_OF_ARRAY_BARS - 1);\r\n        let secondIdx = randomIntFromIntervals(0, NUMBER_OF_ARRAY_BARS - 1);\r\n\r\n        let temp = array[firstIdx];\r\n        array[firstIdx] = array[secondIdx];\r\n        array[secondIdx] = temp;\r\n\r\n        this.setState({array});\r\n    }\r\n\r\n    fewUniqueArray() {\r\n        const array = [];\r\n        let denom = Math.floor(NUMBER_OF_ARRAY_BARS / NUMBER_OF_UNIQUE_BARS);\r\n        \r\n        for( let i = 1; i <= NUMBER_OF_UNIQUE_BARS; i++){\r\n            for (let j = 0; j < denom; j++) {\r\n                array.push(i * denom);\r\n            }\r\n        }\r\n        shuffle(array);\r\n\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimation(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 !== 2;\r\n            if(isColorChange) {\r\n                const [firstBarIdx, secondBarIdx] = animations[i];\r\n                const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                const secondBarStyle = arrayBars[secondBarIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n                setTimeout(() => {\r\n                    firstBarStyle.backgroundColor = color;\r\n                    secondBarStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n            else {\r\n                setTimeout(() => {\r\n                    const [firstBarIdx, newHeight] = animations[i];\r\n                    const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                    firstBarStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = getQuickSortAnimation(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 4 === 0 || i % 4 === 1;\r\n            if(isColorChange) {\r\n                const [firstBarIdx, secondBarIdx] = animations[i];\r\n                if(firstBarIdx < 0 || secondBarIdx < 0) continue;\r\n\r\n                const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                const secondBarStyle = arrayBars[secondBarIdx].style;\r\n                const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n                setTimeout(() => {\r\n                    firstBarStyle.backgroundColor = color;\r\n                    secondBarStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n            else {\r\n                const [firstBarIdx, newHeight] = animations[i];\r\n                if(firstBarIdx < 0 || newHeight < 0) continue;\r\n                setTimeout(() => {\r\n                    const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                    firstBarStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    heapSort() {\r\n        const animations = getHeapSortAnimation(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 6 <= 3;\r\n            if(isColorChange) {\r\n                const [firstBarIdx, secondBarIdx] = animations[i];\r\n                if(firstBarIdx < 0 || secondBarIdx < 0) continue;\r\n\r\n                const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                const secondBarStyle = arrayBars[secondBarIdx].style;\r\n                const color = i % 6 === 0 || i % 6 === 2 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n                setTimeout(() => {\r\n                    firstBarStyle.backgroundColor = color;\r\n                    secondBarStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n            else {\r\n                const [firstBarIdx, newHeight] = animations[i];\r\n                if(firstBarIdx < 0 || newHeight < 0) continue;\r\n                setTimeout(() => {\r\n                    const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                    firstBarStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimation(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 4 === 0 || i % 4 === 1;\r\n            if(isColorChange) {\r\n                const [firstBarIdx, secondBarIdx] = animations[i];\r\n                const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                const secondBarStyle = arrayBars[secondBarIdx].style;\r\n                const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n                setTimeout(() => {\r\n                    firstBarStyle.backgroundColor = color;\r\n                    secondBarStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n            else {\r\n                setTimeout(() => {\r\n                    const [firstBarIdx, newHeight] = animations[i];\r\n                    const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                    firstBarStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    selectionSort() {\r\n        const animations = getSelectionSortAnimation(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 4 === 0 || i % 4 === 1;\r\n            if(isColorChange) {\r\n                const [firstBarIdx, secondBarIdx] = animations[i];\r\n                if(firstBarIdx < 0 || secondBarIdx < 0) continue;\r\n\r\n                const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                const secondBarStyle = arrayBars[secondBarIdx].style;\r\n                const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n                setTimeout(() => {\r\n                    firstBarStyle.backgroundColor = color;\r\n                    secondBarStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n            else {\r\n                setTimeout(() => {\r\n                    const [firstBarIdx, newHeight] = animations[i];\r\n                    if(firstBarIdx < 0 || newHeight < 0) return;\r\n\r\n                    const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                    firstBarStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    insertionSort() {\r\n        const animations = getInsertionSortAnimation(this.state.array);\r\n        for(let i = 0; i < animations.length; i++){\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const isColorChange = i % 3 === 0 || i % 3 === 1;\r\n            if(isColorChange) {\r\n                const [firstBarIdx, secondBarIdx] = animations[i];\r\n                if(firstBarIdx < 0 || secondBarIdx < 0) continue;\r\n\r\n                const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                const secondBarStyle = arrayBars[secondBarIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n\r\n                setTimeout(() => {\r\n                    firstBarStyle.backgroundColor = color;\r\n                    secondBarStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n\r\n            else {\r\n                setTimeout(() => {\r\n                    const [firstBarIdx, newHeight] = animations[i];\r\n                    if(firstBarIdx < 0 || newHeight < 0) return;\r\n\r\n                    const firstBarStyle = arrayBars[firstBarIdx].style;\r\n                    firstBarStyle.height = `${newHeight}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n\r\n        return (\r\n            <div className=\"sorting-visualizer\">\r\n                <div className=\"array-container\">\r\n                    {array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                backgroundColor: PRIMARY_COLOR,\r\n                                height: `${value}px`,\r\n                            }}>\r\n                        </div>\r\n                    ))}\r\n                    \r\n                    <button onClick={() => this.mergeSort() }>Merge Sort </button>\r\n                    <button onClick={() => this.quickSort() }>Quick Sort</button>\r\n                    <button onClick={() => this.heapSort()  }>Heap Sort</button>\r\n                    <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                    <button onClick={() => this.selectionSort()}>Selection Sort</button>\r\n                    <button onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n                </div>\r\n\r\n                <button onClick={() => this.resetArray()}>Generate New Array </button>\r\n                <button onClick={() => this.reverseArray()}>Reverse Array </button>\r\n                <button onClick={() => this.almostSortedArray()}>Almost Sorted Array </button>\r\n                <button onClick={() => this.fewUniqueArray()}>Few Unique Array </button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Min, max bounds included\r\nexport function randomIntFromIntervals(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction shuffle(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n  }","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}